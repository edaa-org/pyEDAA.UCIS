name: Pipeline

on:
  push:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 5'

jobs:

  Params:
    uses: pyTooling/Actions/.github/workflows/Parameters.yml@r0
    with:
      name: pyEDAA.UCIS
      system_list: "ubuntu windows macos"

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@r0
    needs:
      - Params
    with:
      jobs: ${{ needs.Params.outputs.python_jobs }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}

  Coverage:
    uses: pyTooling/Actions/.github/workflows/CoverageCollection.yml@r0
    needs:
      - Params
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  StaticTypeCheck:
    uses: pyTooling/Actions/.github/workflows/StaticTypeCheck.yml@r0
    needs:
      - Params
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      requirements: '-r tests/requirements.txt'
      commands: |
        cd pyEDAA
        mypy --html-report ../htmlmypy -p UCIS
      report: 'htmlmypy'
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}

  Package:
    uses: pyTooling/Actions/.github/workflows/Package.yml@r0
    needs:
      - Params
#      - Coverage
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}

  Install:
    name: ${{ matrix.sysicon }} ${{ matrix.pyicon }} Unit Tests using Python ${{ matrix.python }}
    runs-on: ${{ matrix.runs-on }}
    needs:
      - Params
      - Package

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Params.outputs.python_jobs) }}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v2

      - name: üì• Download artifacts '${{ fromJson(needs.Params.outputs.params).artifacts.package }}' from 'Package' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}

      - name: 'üü¶ Setup MSYS2'
        if: matrix.system == 'msys2'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          pacboy: >-
            python-pip:p
            python-wheel:p
            python-lxml:p

      - name: üêç Setup Python ${{ matrix.python }}
        if: matrix.system != 'msys2'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: ‚öôÔ∏è Update pip
        run: python -m pip install -U pip

      - name: ‚öôÔ∏è Install wheel
        if: matrix.system != 'msys2'
        run: |
          python -m pip install -U wheel pytest

      - name: üîß Install package
        run: python -m pip install pyEDAA.UCIS-0.1.0-py3-none-any.whl

      - name: ‚òë Run console tests
        if: matrix.system == 'windows'
        run: |
          # $PYTEST_ARGS = if ("${{ inputs.artifact }}".length -gt 0) { "--junitxml=TestReport.xml" } else { "" }
          # python -m pytest -rA ${{ inputs.unittest_directory }} $PYTEST_ARGS --color=yes
          $PYTEST_ARGS = "--junitxml=TestReport.xml"
          python -m pytest -rA tests/console $PYTEST_ARGS --color=yes

      - name: ‚òë Run console tests
        if: matrix.system != 'windows'
        run: |
          # [ 'x${{ inputs.artifact }}' != 'x' ] && PYTEST_ARGS='--junitxml=TestReport.xml' || unset PYTEST_ARGS
          # python -m pytest -rA ${{ inputs.unittest_directory }} $PYTEST_ARGS --color=yes
          PYTEST_ARGS='--junitxml=TestReport.xml'
          python -m pytest -rA tests/console $PYTEST_ARGS --color=yes

      - name: üì§ Upload 'TestReport.xml' artifact
        if: inputs.artifact != ''
        uses: actions/upload-artifact@v2
        with:
          name: ConsoleTestReport-${{ matrix.system }}-${{ matrix.python }}
          path: TestReport.xml
          if-no-files-found: error
          retention-days: 1

  PublishTestResults:
    uses: pyTooling/Actions/.github/workflows/PublishTestResults.yml@r0
    needs:
      - UnitTesting
      - Install

  Release:
    uses: pyTooling/Actions/.github/workflows/Release.yml@r0
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage
      - StaticTypeCheck
      - Package
      - Install

  PublishOnPyPI:
    uses: pyTooling/Actions/.github/workflows/PublishOnPyPI.yml@r0
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Params
      - Release
      - Package
    with:
      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}
      requirements: -r dist/requirements.txt
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}
    secrets:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

#  VerifyDocs:
#    uses: pyTooling/Actions/.github/workflows/VerifyDocs.yml@r0
#    needs:
#      - Params
#    with:
#      python_version: ${{ fromJson(needs.Params.outputs.params).python_version }}

  BuildTheDocs:
    uses: pyTooling/Actions/.github/workflows/BuildTheDocs.yml@r0
    needs:
      - Params
#      - VerifyDocs
    with:
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}

  PublishToGitHubPages:
    uses: pyTooling/Actions/.github/workflows/PublishToGitHubPages.yml@r0
    needs:
      - Params
      - BuildTheDocs
      - Coverage
      - StaticTypeCheck
    with:
      doc: ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}
      coverage: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
      typing: ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}

  ArtifactCleanUp:
    uses: pyTooling/Actions/.github/workflows/ArtifactCleanUp.yml@r0
    needs:
      - Params
      - UnitTesting
      - Coverage
      - Install
      - StaticTypeCheck
      - BuildTheDocs
      - PublishToGitHubPages
      - PublishTestResults
    with:
      package: ${{ fromJson(needs.Params.outputs.params).artifacts.package }}
      remaining: |
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-ubuntu-3.7
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-ubuntu-3.8
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-ubuntu-3.9
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-ubuntu-3.10
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-windows-3.7
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-windows-3.8
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-windows-3.9
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-windows-3.10
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-msys2-3.9
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-macos-3.7
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-macos-3.8
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-macos-3.9
        ${{ fromJson(needs.Params.outputs.params).artifacts.unittesting }}-macos-3.10
        ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
        ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}
        ${{ fromJson(needs.Params.outputs.params).artifacts.doc }}
